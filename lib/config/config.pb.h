// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: config.proto
// Protobuf C++ Version: 5.29.3

#ifndef config_2eproto_2epb_2eh
#define config_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_config_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_config_2eproto;
namespace config {
class AdderNode;
struct AdderNodeDefaultTypeInternal;
extern AdderNodeDefaultTypeInternal _AdderNode_default_instance_;
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class ConstantNode;
struct ConstantNodeDefaultTypeInternal;
extern ConstantNodeDefaultTypeInternal _ConstantNode_default_instance_;
class DividerNode;
struct DividerNodeDefaultTypeInternal;
extern DividerNodeDefaultTypeInternal _DividerNode_default_instance_;
class MultiplierNode;
struct MultiplierNodeDefaultTypeInternal;
extern MultiplierNodeDefaultTypeInternal _MultiplierNode_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Runner;
struct RunnerDefaultTypeInternal;
extern RunnerDefaultTypeInternal _Runner_default_instance_;
class SubtractorNode;
struct SubtractorNodeDefaultTypeInternal;
extern SubtractorNodeDefaultTypeInternal _SubtractorNode_default_instance_;
class UniverseNode;
struct UniverseNodeDefaultTypeInternal;
extern UniverseNodeDefaultTypeInternal _UniverseNode_default_instance_;
class UniverseNode_Light;
struct UniverseNode_LightDefaultTypeInternal;
extern UniverseNode_LightDefaultTypeInternal _UniverseNode_Light_default_instance_;
}  // namespace config
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace config {

// ===================================================================


// -------------------------------------------------------------------

class UniverseNode_Light final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.UniverseNode.Light) */ {
 public:
  inline UniverseNode_Light() : UniverseNode_Light(nullptr) {}
  ~UniverseNode_Light() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UniverseNode_Light* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UniverseNode_Light));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UniverseNode_Light(
      ::google::protobuf::internal::ConstantInitialized);

  inline UniverseNode_Light(const UniverseNode_Light& from) : UniverseNode_Light(nullptr, from) {}
  inline UniverseNode_Light(UniverseNode_Light&& from) noexcept
      : UniverseNode_Light(nullptr, std::move(from)) {}
  inline UniverseNode_Light& operator=(const UniverseNode_Light& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniverseNode_Light& operator=(UniverseNode_Light&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UniverseNode_Light& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniverseNode_Light* internal_default_instance() {
    return reinterpret_cast<const UniverseNode_Light*>(
        &_UniverseNode_Light_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UniverseNode_Light& a, UniverseNode_Light& b) { a.Swap(&b); }
  inline void Swap(UniverseNode_Light* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniverseNode_Light* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniverseNode_Light* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UniverseNode_Light>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UniverseNode_Light& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UniverseNode_Light& from) { UniverseNode_Light::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UniverseNode_Light* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.UniverseNode.Light"; }

 protected:
  explicit UniverseNode_Light(::google::protobuf::Arena* arena);
  UniverseNode_Light(::google::protobuf::Arena* arena, const UniverseNode_Light& from);
  UniverseNode_Light(::google::protobuf::Arena* arena, UniverseNode_Light&& from) noexcept
      : UniverseNode_Light(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated uint32 channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::uint32_t channels(int index) const;
  void set_channels(int index, ::uint32_t value);
  void add_channels(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& channels() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_channels();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_channels() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_channels();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:config.UniverseNode.Light)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UniverseNode_Light& from_msg);
    ::google::protobuf::RepeatedField<::uint32_t> channels_;
    ::google::protobuf::internal::CachedSize _channels_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class SubtractorNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.SubtractorNode) */ {
 public:
  inline SubtractorNode() : SubtractorNode(nullptr) {}
  ~SubtractorNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubtractorNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubtractorNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubtractorNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubtractorNode(const SubtractorNode& from) : SubtractorNode(nullptr, from) {}
  inline SubtractorNode(SubtractorNode&& from) noexcept
      : SubtractorNode(nullptr, std::move(from)) {}
  inline SubtractorNode& operator=(const SubtractorNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtractorNode& operator=(SubtractorNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubtractorNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubtractorNode* internal_default_instance() {
    return reinterpret_cast<const SubtractorNode*>(
        &_SubtractorNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SubtractorNode& a, SubtractorNode& b) { a.Swap(&b); }
  inline void Swap(SubtractorNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtractorNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubtractorNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubtractorNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubtractorNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubtractorNode& from) { SubtractorNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubtractorNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.SubtractorNode"; }

 protected:
  explicit SubtractorNode(::google::protobuf::Arena* arena);
  SubtractorNode(::google::protobuf::Arena* arena, const SubtractorNode& from);
  SubtractorNode(::google::protobuf::Arena* arena, SubtractorNode&& from) noexcept
      : SubtractorNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSaturatingFieldNumber = 1,
    kInputsFieldNumber = 2,
  };
  // bool saturating = 1;
  void clear_saturating() ;
  bool saturating() const;
  void set_saturating(bool value);

  private:
  bool _internal_saturating() const;
  void _internal_set_saturating(bool value);

  public:
  // uint32 inputs = 2;
  void clear_inputs() ;
  ::uint32_t inputs() const;
  void set_inputs(::uint32_t value);

  private:
  ::uint32_t _internal_inputs() const;
  void _internal_set_inputs(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:config.SubtractorNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubtractorNode& from_msg);
    bool saturating_;
    ::uint32_t inputs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class MultiplierNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.MultiplierNode) */ {
 public:
  inline MultiplierNode() : MultiplierNode(nullptr) {}
  ~MultiplierNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MultiplierNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MultiplierNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiplierNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultiplierNode(const MultiplierNode& from) : MultiplierNode(nullptr, from) {}
  inline MultiplierNode(MultiplierNode&& from) noexcept
      : MultiplierNode(nullptr, std::move(from)) {}
  inline MultiplierNode& operator=(const MultiplierNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiplierNode& operator=(MultiplierNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiplierNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiplierNode* internal_default_instance() {
    return reinterpret_cast<const MultiplierNode*>(
        &_MultiplierNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MultiplierNode& a, MultiplierNode& b) { a.Swap(&b); }
  inline void Swap(MultiplierNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiplierNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiplierNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MultiplierNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiplierNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultiplierNode& from) { MultiplierNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MultiplierNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.MultiplierNode"; }

 protected:
  explicit MultiplierNode(::google::protobuf::Arena* arena);
  MultiplierNode(::google::protobuf::Arena* arena, const MultiplierNode& from);
  MultiplierNode(::google::protobuf::Arena* arena, MultiplierNode&& from) noexcept
      : MultiplierNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSaturatingFieldNumber = 1,
    kInputsFieldNumber = 2,
  };
  // bool saturating = 1;
  void clear_saturating() ;
  bool saturating() const;
  void set_saturating(bool value);

  private:
  bool _internal_saturating() const;
  void _internal_set_saturating(bool value);

  public:
  // uint32 inputs = 2;
  void clear_inputs() ;
  ::uint32_t inputs() const;
  void set_inputs(::uint32_t value);

  private:
  ::uint32_t _internal_inputs() const;
  void _internal_set_inputs(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:config.MultiplierNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultiplierNode& from_msg);
    bool saturating_;
    ::uint32_t inputs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class DividerNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.DividerNode) */ {
 public:
  inline DividerNode() : DividerNode(nullptr) {}
  ~DividerNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DividerNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DividerNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DividerNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline DividerNode(const DividerNode& from) : DividerNode(nullptr, from) {}
  inline DividerNode(DividerNode&& from) noexcept
      : DividerNode(nullptr, std::move(from)) {}
  inline DividerNode& operator=(const DividerNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DividerNode& operator=(DividerNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DividerNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const DividerNode* internal_default_instance() {
    return reinterpret_cast<const DividerNode*>(
        &_DividerNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DividerNode& a, DividerNode& b) { a.Swap(&b); }
  inline void Swap(DividerNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DividerNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DividerNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DividerNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DividerNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DividerNode& from) { DividerNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DividerNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.DividerNode"; }

 protected:
  explicit DividerNode(::google::protobuf::Arena* arena);
  DividerNode(::google::protobuf::Arena* arena, const DividerNode& from);
  DividerNode(::google::protobuf::Arena* arena, DividerNode&& from) noexcept
      : DividerNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSaturatingFieldNumber = 1,
    kInputsFieldNumber = 2,
  };
  // bool saturating = 1;
  void clear_saturating() ;
  bool saturating() const;
  void set_saturating(bool value);

  private:
  bool _internal_saturating() const;
  void _internal_set_saturating(bool value);

  public:
  // uint32 inputs = 2;
  void clear_inputs() ;
  ::uint32_t inputs() const;
  void set_inputs(::uint32_t value);

  private:
  ::uint32_t _internal_inputs() const;
  void _internal_set_inputs(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:config.DividerNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DividerNode& from_msg);
    bool saturating_;
    ::uint32_t inputs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ConstantNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.ConstantNode) */ {
 public:
  inline ConstantNode() : ConstantNode(nullptr) {}
  ~ConstantNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConstantNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConstantNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConstantNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConstantNode(const ConstantNode& from) : ConstantNode(nullptr, from) {}
  inline ConstantNode(ConstantNode&& from) noexcept
      : ConstantNode(nullptr, std::move(from)) {}
  inline ConstantNode& operator=(const ConstantNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstantNode& operator=(ConstantNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstantNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstantNode* internal_default_instance() {
    return reinterpret_cast<const ConstantNode*>(
        &_ConstantNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ConstantNode& a, ConstantNode& b) { a.Swap(&b); }
  inline void Swap(ConstantNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstantNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstantNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConstantNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConstantNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConstantNode& from) { ConstantNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConstantNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.ConstantNode"; }

 protected:
  explicit ConstantNode(::google::protobuf::Arena* arena);
  ConstantNode(::google::protobuf::Arena* arena, const ConstantNode& from);
  ConstantNode(::google::protobuf::Arena* arena, ConstantNode&& from) noexcept
      : ConstantNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf::RepeatedField<float>& values() const;
  ::google::protobuf::RepeatedField<float>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_values() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:config.ConstantNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConstantNode& from_msg);
    ::google::protobuf::RepeatedField<float> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Connection final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  ~Connection() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Connection* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Connection));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Connection(
      ::google::protobuf::internal::ConstantInitialized);

  inline Connection(const Connection& from) : Connection(nullptr, from) {}
  inline Connection(Connection&& from) noexcept
      : Connection(nullptr, std::move(from)) {}
  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
        &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Connection& a, Connection& b) { a.Swap(&b); }
  inline void Swap(Connection* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connection* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Connection>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Connection& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Connection& from) { Connection::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Connection* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.Connection"; }

 protected:
  explicit Connection(::google::protobuf::Arena* arena);
  Connection(::google::protobuf::Arena* arena, const Connection& from);
  Connection(::google::protobuf::Arena* arena, Connection&& from) noexcept
      : Connection(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromNodeFieldNumber = 1,
    kFromOutputFieldNumber = 2,
    kToNodeFieldNumber = 3,
    kToInputFieldNumber = 4,
  };
  // uint32 from_node = 1;
  void clear_from_node() ;
  ::uint32_t from_node() const;
  void set_from_node(::uint32_t value);

  private:
  ::uint32_t _internal_from_node() const;
  void _internal_set_from_node(::uint32_t value);

  public:
  // uint32 from_output = 2;
  void clear_from_output() ;
  ::uint32_t from_output() const;
  void set_from_output(::uint32_t value);

  private:
  ::uint32_t _internal_from_output() const;
  void _internal_set_from_output(::uint32_t value);

  public:
  // uint32 to_node = 3;
  void clear_to_node() ;
  ::uint32_t to_node() const;
  void set_to_node(::uint32_t value);

  private:
  ::uint32_t _internal_to_node() const;
  void _internal_set_to_node(::uint32_t value);

  public:
  // uint32 to_input = 4;
  void clear_to_input() ;
  ::uint32_t to_input() const;
  void set_to_input(::uint32_t value);

  private:
  ::uint32_t _internal_to_input() const;
  void _internal_set_to_input(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:config.Connection)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Connection& from_msg);
    ::uint32_t from_node_;
    ::uint32_t from_output_;
    ::uint32_t to_node_;
    ::uint32_t to_input_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class AdderNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.AdderNode) */ {
 public:
  inline AdderNode() : AdderNode(nullptr) {}
  ~AdderNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AdderNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AdderNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AdderNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline AdderNode(const AdderNode& from) : AdderNode(nullptr, from) {}
  inline AdderNode(AdderNode&& from) noexcept
      : AdderNode(nullptr, std::move(from)) {}
  inline AdderNode& operator=(const AdderNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdderNode& operator=(AdderNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdderNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdderNode* internal_default_instance() {
    return reinterpret_cast<const AdderNode*>(
        &_AdderNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AdderNode& a, AdderNode& b) { a.Swap(&b); }
  inline void Swap(AdderNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdderNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdderNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AdderNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AdderNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AdderNode& from) { AdderNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AdderNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.AdderNode"; }

 protected:
  explicit AdderNode(::google::protobuf::Arena* arena);
  AdderNode(::google::protobuf::Arena* arena, const AdderNode& from);
  AdderNode(::google::protobuf::Arena* arena, AdderNode&& from) noexcept
      : AdderNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSaturatingFieldNumber = 1,
    kInputsFieldNumber = 2,
  };
  // bool saturating = 1;
  void clear_saturating() ;
  bool saturating() const;
  void set_saturating(bool value);

  private:
  bool _internal_saturating() const;
  void _internal_set_saturating(bool value);

  public:
  // uint32 inputs = 2;
  void clear_inputs() ;
  ::uint32_t inputs() const;
  void set_inputs(::uint32_t value);

  private:
  ::uint32_t _internal_inputs() const;
  void _internal_set_inputs(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:config.AdderNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AdderNode& from_msg);
    bool saturating_;
    ::uint32_t inputs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class UniverseNode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.UniverseNode) */ {
 public:
  inline UniverseNode() : UniverseNode(nullptr) {}
  ~UniverseNode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UniverseNode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UniverseNode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UniverseNode(
      ::google::protobuf::internal::ConstantInitialized);

  inline UniverseNode(const UniverseNode& from) : UniverseNode(nullptr, from) {}
  inline UniverseNode(UniverseNode&& from) noexcept
      : UniverseNode(nullptr, std::move(from)) {}
  inline UniverseNode& operator=(const UniverseNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniverseNode& operator=(UniverseNode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UniverseNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniverseNode* internal_default_instance() {
    return reinterpret_cast<const UniverseNode*>(
        &_UniverseNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(UniverseNode& a, UniverseNode& b) { a.Swap(&b); }
  inline void Swap(UniverseNode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniverseNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UniverseNode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UniverseNode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UniverseNode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UniverseNode& from) { UniverseNode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UniverseNode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.UniverseNode"; }

 protected:
  explicit UniverseNode(::google::protobuf::Arena* arena);
  UniverseNode(::google::protobuf::Arena* arena, const UniverseNode& from);
  UniverseNode(::google::protobuf::Arena* arena, UniverseNode&& from) noexcept
      : UniverseNode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Light = UniverseNode_Light;

  // accessors -------------------------------------------------------
  enum : int {
    kLightsFieldNumber = 1,
    kMaxChannelFieldNumber = 2,
  };
  // repeated .config.UniverseNode.Light lights = 1;
  int lights_size() const;
  private:
  int _internal_lights_size() const;

  public:
  void clear_lights() ;
  ::config::UniverseNode_Light* mutable_lights(int index);
  ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>* mutable_lights();

  private:
  const ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>& _internal_lights() const;
  ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>* _internal_mutable_lights();
  public:
  const ::config::UniverseNode_Light& lights(int index) const;
  ::config::UniverseNode_Light* add_lights();
  const ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>& lights() const;
  // uint32 max_channel = 2;
  void clear_max_channel() ;
  ::uint32_t max_channel() const;
  void set_max_channel(::uint32_t value);

  private:
  ::uint32_t _internal_max_channel() const;
  void _internal_set_max_channel(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:config.UniverseNode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UniverseNode& from_msg);
    ::google::protobuf::RepeatedPtrField< ::config::UniverseNode_Light > lights_;
    ::uint32_t max_channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Node final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Node* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Node));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Node(
      ::google::protobuf::internal::ConstantInitialized);

  inline Node(const Node& from) : Node(nullptr, from) {}
  inline Node(Node&& from) noexcept
      : Node(nullptr, std::move(from)) {}
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  enum ConfigCase {
    kConstantNode = 2,
    kAdderNode = 3,
    kSubtractorNode = 4,
    kMultiplierNode = 5,
    kDividerNode = 6,
    kUniverseNode = 7,
    CONFIG_NOT_SET = 0,
  };
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
        &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Node& a, Node& b) { a.Swap(&b); }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Node>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Node& from) { Node::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Node* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.Node"; }

 protected:
  explicit Node(::google::protobuf::Arena* arena);
  Node(::google::protobuf::Arena* arena, const Node& from);
  Node(::google::protobuf::Arena* arena, Node&& from) noexcept
      : Node(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kConstantNodeFieldNumber = 2,
    kAdderNodeFieldNumber = 3,
    kSubtractorNodeFieldNumber = 4,
    kMultiplierNodeFieldNumber = 5,
    kDividerNodeFieldNumber = 6,
    kUniverseNodeFieldNumber = 7,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .config.ConstantNode constant_node = 2;
  bool has_constant_node() const;
  private:
  bool _internal_has_constant_node() const;

  public:
  void clear_constant_node() ;
  const ::config::ConstantNode& constant_node() const;
  PROTOBUF_NODISCARD ::config::ConstantNode* release_constant_node();
  ::config::ConstantNode* mutable_constant_node();
  void set_allocated_constant_node(::config::ConstantNode* value);
  void unsafe_arena_set_allocated_constant_node(::config::ConstantNode* value);
  ::config::ConstantNode* unsafe_arena_release_constant_node();

  private:
  const ::config::ConstantNode& _internal_constant_node() const;
  ::config::ConstantNode* _internal_mutable_constant_node();

  public:
  // .config.AdderNode adder_node = 3;
  bool has_adder_node() const;
  private:
  bool _internal_has_adder_node() const;

  public:
  void clear_adder_node() ;
  const ::config::AdderNode& adder_node() const;
  PROTOBUF_NODISCARD ::config::AdderNode* release_adder_node();
  ::config::AdderNode* mutable_adder_node();
  void set_allocated_adder_node(::config::AdderNode* value);
  void unsafe_arena_set_allocated_adder_node(::config::AdderNode* value);
  ::config::AdderNode* unsafe_arena_release_adder_node();

  private:
  const ::config::AdderNode& _internal_adder_node() const;
  ::config::AdderNode* _internal_mutable_adder_node();

  public:
  // .config.SubtractorNode subtractor_node = 4;
  bool has_subtractor_node() const;
  private:
  bool _internal_has_subtractor_node() const;

  public:
  void clear_subtractor_node() ;
  const ::config::SubtractorNode& subtractor_node() const;
  PROTOBUF_NODISCARD ::config::SubtractorNode* release_subtractor_node();
  ::config::SubtractorNode* mutable_subtractor_node();
  void set_allocated_subtractor_node(::config::SubtractorNode* value);
  void unsafe_arena_set_allocated_subtractor_node(::config::SubtractorNode* value);
  ::config::SubtractorNode* unsafe_arena_release_subtractor_node();

  private:
  const ::config::SubtractorNode& _internal_subtractor_node() const;
  ::config::SubtractorNode* _internal_mutable_subtractor_node();

  public:
  // .config.MultiplierNode multiplier_node = 5;
  bool has_multiplier_node() const;
  private:
  bool _internal_has_multiplier_node() const;

  public:
  void clear_multiplier_node() ;
  const ::config::MultiplierNode& multiplier_node() const;
  PROTOBUF_NODISCARD ::config::MultiplierNode* release_multiplier_node();
  ::config::MultiplierNode* mutable_multiplier_node();
  void set_allocated_multiplier_node(::config::MultiplierNode* value);
  void unsafe_arena_set_allocated_multiplier_node(::config::MultiplierNode* value);
  ::config::MultiplierNode* unsafe_arena_release_multiplier_node();

  private:
  const ::config::MultiplierNode& _internal_multiplier_node() const;
  ::config::MultiplierNode* _internal_mutable_multiplier_node();

  public:
  // .config.DividerNode divider_node = 6;
  bool has_divider_node() const;
  private:
  bool _internal_has_divider_node() const;

  public:
  void clear_divider_node() ;
  const ::config::DividerNode& divider_node() const;
  PROTOBUF_NODISCARD ::config::DividerNode* release_divider_node();
  ::config::DividerNode* mutable_divider_node();
  void set_allocated_divider_node(::config::DividerNode* value);
  void unsafe_arena_set_allocated_divider_node(::config::DividerNode* value);
  ::config::DividerNode* unsafe_arena_release_divider_node();

  private:
  const ::config::DividerNode& _internal_divider_node() const;
  ::config::DividerNode* _internal_mutable_divider_node();

  public:
  // .config.UniverseNode universe_node = 7;
  bool has_universe_node() const;
  private:
  bool _internal_has_universe_node() const;

  public:
  void clear_universe_node() ;
  const ::config::UniverseNode& universe_node() const;
  PROTOBUF_NODISCARD ::config::UniverseNode* release_universe_node();
  ::config::UniverseNode* mutable_universe_node();
  void set_allocated_universe_node(::config::UniverseNode* value);
  void unsafe_arena_set_allocated_universe_node(::config::UniverseNode* value);
  ::config::UniverseNode* unsafe_arena_release_universe_node();

  private:
  const ::config::UniverseNode& _internal_universe_node() const;
  ::config::UniverseNode* _internal_mutable_universe_node();

  public:
  void clear_config();
  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:config.Node)
 private:
  class _Internal;
  void set_has_constant_node();
  void set_has_adder_node();
  void set_has_subtractor_node();
  void set_has_multiplier_node();
  void set_has_divider_node();
  void set_has_universe_node();
  inline bool has_config() const;
  inline void clear_has_config();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 7, 6,
      24, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Node& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    union ConfigUnion {
      constexpr ConfigUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::config::ConstantNode* constant_node_;
      ::config::AdderNode* adder_node_;
      ::config::SubtractorNode* subtractor_node_;
      ::config::MultiplierNode* multiplier_node_;
      ::config::DividerNode* divider_node_;
      ::config::UniverseNode* universe_node_;
    } config_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Runner final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:config.Runner) */ {
 public:
  inline Runner() : Runner(nullptr) {}
  ~Runner() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Runner* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Runner));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Runner(
      ::google::protobuf::internal::ConstantInitialized);

  inline Runner(const Runner& from) : Runner(nullptr, from) {}
  inline Runner(Runner&& from) noexcept
      : Runner(nullptr, std::move(from)) {}
  inline Runner& operator=(const Runner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Runner& operator=(Runner&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Runner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Runner* internal_default_instance() {
    return reinterpret_cast<const Runner*>(
        &_Runner_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Runner& a, Runner& b) { a.Swap(&b); }
  inline void Swap(Runner* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Runner* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Runner* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Runner>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Runner& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Runner& from) { Runner::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Runner* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "config.Runner"; }

 protected:
  explicit Runner(::google::protobuf::Arena* arena);
  Runner(::google::protobuf::Arena* arena, const Runner& from);
  Runner(::google::protobuf::Arena* arena, Runner&& from) noexcept
      : Runner(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodesFieldNumber = 1,
    kConnectionsFieldNumber = 2,
  };
  // repeated .config.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::config::Node* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField<::config::Node>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<::config::Node>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::config::Node>* _internal_mutable_nodes();
  public:
  const ::config::Node& nodes(int index) const;
  ::config::Node* add_nodes();
  const ::google::protobuf::RepeatedPtrField<::config::Node>& nodes() const;
  // repeated .config.Connection connections = 2;
  int connections_size() const;
  private:
  int _internal_connections_size() const;

  public:
  void clear_connections() ;
  ::config::Connection* mutable_connections(int index);
  ::google::protobuf::RepeatedPtrField<::config::Connection>* mutable_connections();

  private:
  const ::google::protobuf::RepeatedPtrField<::config::Connection>& _internal_connections() const;
  ::google::protobuf::RepeatedPtrField<::config::Connection>* _internal_mutable_connections();
  public:
  const ::config::Connection& connections(int index) const;
  ::config::Connection* add_connections();
  const ::google::protobuf::RepeatedPtrField<::config::Connection>& connections() const;
  // @@protoc_insertion_point(class_scope:config.Runner)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Runner& from_msg);
    ::google::protobuf::RepeatedPtrField< ::config::Node > nodes_;
    ::google::protobuf::RepeatedPtrField< ::config::Connection > connections_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConstantNode

// repeated float values = 1;
inline int ConstantNode::_internal_values_size() const {
  return _internal_values().size();
}
inline int ConstantNode::values_size() const {
  return _internal_values_size();
}
inline void ConstantNode::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline float ConstantNode::values(int index) const {
  // @@protoc_insertion_point(field_get:config.ConstantNode.values)
  return _internal_values().Get(index);
}
inline void ConstantNode::set_values(int index, float value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:config.ConstantNode.values)
}
inline void ConstantNode::add_values(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:config.ConstantNode.values)
}
inline const ::google::protobuf::RepeatedField<float>& ConstantNode::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:config.ConstantNode.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<float>* ConstantNode::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:config.ConstantNode.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<float>&
ConstantNode::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<float>* ConstantNode::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AdderNode

// bool saturating = 1;
inline void AdderNode::clear_saturating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = false;
}
inline bool AdderNode::saturating() const {
  // @@protoc_insertion_point(field_get:config.AdderNode.saturating)
  return _internal_saturating();
}
inline void AdderNode::set_saturating(bool value) {
  _internal_set_saturating(value);
  // @@protoc_insertion_point(field_set:config.AdderNode.saturating)
}
inline bool AdderNode::_internal_saturating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saturating_;
}
inline void AdderNode::_internal_set_saturating(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = value;
}

// uint32 inputs = 2;
inline void AdderNode::clear_inputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = 0u;
}
inline ::uint32_t AdderNode::inputs() const {
  // @@protoc_insertion_point(field_get:config.AdderNode.inputs)
  return _internal_inputs();
}
inline void AdderNode::set_inputs(::uint32_t value) {
  _internal_set_inputs(value);
  // @@protoc_insertion_point(field_set:config.AdderNode.inputs)
}
inline ::uint32_t AdderNode::_internal_inputs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inputs_;
}
inline void AdderNode::_internal_set_inputs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = value;
}

// -------------------------------------------------------------------

// SubtractorNode

// bool saturating = 1;
inline void SubtractorNode::clear_saturating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = false;
}
inline bool SubtractorNode::saturating() const {
  // @@protoc_insertion_point(field_get:config.SubtractorNode.saturating)
  return _internal_saturating();
}
inline void SubtractorNode::set_saturating(bool value) {
  _internal_set_saturating(value);
  // @@protoc_insertion_point(field_set:config.SubtractorNode.saturating)
}
inline bool SubtractorNode::_internal_saturating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saturating_;
}
inline void SubtractorNode::_internal_set_saturating(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = value;
}

// uint32 inputs = 2;
inline void SubtractorNode::clear_inputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = 0u;
}
inline ::uint32_t SubtractorNode::inputs() const {
  // @@protoc_insertion_point(field_get:config.SubtractorNode.inputs)
  return _internal_inputs();
}
inline void SubtractorNode::set_inputs(::uint32_t value) {
  _internal_set_inputs(value);
  // @@protoc_insertion_point(field_set:config.SubtractorNode.inputs)
}
inline ::uint32_t SubtractorNode::_internal_inputs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inputs_;
}
inline void SubtractorNode::_internal_set_inputs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = value;
}

// -------------------------------------------------------------------

// MultiplierNode

// bool saturating = 1;
inline void MultiplierNode::clear_saturating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = false;
}
inline bool MultiplierNode::saturating() const {
  // @@protoc_insertion_point(field_get:config.MultiplierNode.saturating)
  return _internal_saturating();
}
inline void MultiplierNode::set_saturating(bool value) {
  _internal_set_saturating(value);
  // @@protoc_insertion_point(field_set:config.MultiplierNode.saturating)
}
inline bool MultiplierNode::_internal_saturating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saturating_;
}
inline void MultiplierNode::_internal_set_saturating(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = value;
}

// uint32 inputs = 2;
inline void MultiplierNode::clear_inputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = 0u;
}
inline ::uint32_t MultiplierNode::inputs() const {
  // @@protoc_insertion_point(field_get:config.MultiplierNode.inputs)
  return _internal_inputs();
}
inline void MultiplierNode::set_inputs(::uint32_t value) {
  _internal_set_inputs(value);
  // @@protoc_insertion_point(field_set:config.MultiplierNode.inputs)
}
inline ::uint32_t MultiplierNode::_internal_inputs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inputs_;
}
inline void MultiplierNode::_internal_set_inputs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = value;
}

// -------------------------------------------------------------------

// DividerNode

// bool saturating = 1;
inline void DividerNode::clear_saturating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = false;
}
inline bool DividerNode::saturating() const {
  // @@protoc_insertion_point(field_get:config.DividerNode.saturating)
  return _internal_saturating();
}
inline void DividerNode::set_saturating(bool value) {
  _internal_set_saturating(value);
  // @@protoc_insertion_point(field_set:config.DividerNode.saturating)
}
inline bool DividerNode::_internal_saturating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saturating_;
}
inline void DividerNode::_internal_set_saturating(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saturating_ = value;
}

// uint32 inputs = 2;
inline void DividerNode::clear_inputs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = 0u;
}
inline ::uint32_t DividerNode::inputs() const {
  // @@protoc_insertion_point(field_get:config.DividerNode.inputs)
  return _internal_inputs();
}
inline void DividerNode::set_inputs(::uint32_t value) {
  _internal_set_inputs(value);
  // @@protoc_insertion_point(field_set:config.DividerNode.inputs)
}
inline ::uint32_t DividerNode::_internal_inputs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inputs_;
}
inline void DividerNode::_internal_set_inputs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inputs_ = value;
}

// -------------------------------------------------------------------

// UniverseNode_Light

// string name = 1;
inline void UniverseNode_Light::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UniverseNode_Light::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.UniverseNode.Light.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UniverseNode_Light::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.UniverseNode.Light.name)
}
inline std::string* UniverseNode_Light::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:config.UniverseNode.Light.name)
  return _s;
}
inline const std::string& UniverseNode_Light::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void UniverseNode_Light::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UniverseNode_Light::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UniverseNode_Light::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:config.UniverseNode.Light.name)
  return _impl_.name_.Release();
}
inline void UniverseNode_Light::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:config.UniverseNode.Light.name)
}

// repeated uint32 channels = 2;
inline int UniverseNode_Light::_internal_channels_size() const {
  return _internal_channels().size();
}
inline int UniverseNode_Light::channels_size() const {
  return _internal_channels_size();
}
inline void UniverseNode_Light::clear_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_.Clear();
}
inline ::uint32_t UniverseNode_Light::channels(int index) const {
  // @@protoc_insertion_point(field_get:config.UniverseNode.Light.channels)
  return _internal_channels().Get(index);
}
inline void UniverseNode_Light::set_channels(int index, ::uint32_t value) {
  _internal_mutable_channels()->Set(index, value);
  // @@protoc_insertion_point(field_set:config.UniverseNode.Light.channels)
}
inline void UniverseNode_Light::add_channels(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_channels()->Add(value);
  // @@protoc_insertion_point(field_add:config.UniverseNode.Light.channels)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& UniverseNode_Light::channels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:config.UniverseNode.Light.channels)
  return _internal_channels();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* UniverseNode_Light::mutable_channels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:config.UniverseNode.Light.channels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_channels();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
UniverseNode_Light::_internal_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channels_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* UniverseNode_Light::_internal_mutable_channels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.channels_;
}

// -------------------------------------------------------------------

// UniverseNode

// repeated .config.UniverseNode.Light lights = 1;
inline int UniverseNode::_internal_lights_size() const {
  return _internal_lights().size();
}
inline int UniverseNode::lights_size() const {
  return _internal_lights_size();
}
inline void UniverseNode::clear_lights() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lights_.Clear();
}
inline ::config::UniverseNode_Light* UniverseNode::mutable_lights(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:config.UniverseNode.lights)
  return _internal_mutable_lights()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>* UniverseNode::mutable_lights()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:config.UniverseNode.lights)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lights();
}
inline const ::config::UniverseNode_Light& UniverseNode::lights(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.UniverseNode.lights)
  return _internal_lights().Get(index);
}
inline ::config::UniverseNode_Light* UniverseNode::add_lights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::config::UniverseNode_Light* _add = _internal_mutable_lights()->Add();
  // @@protoc_insertion_point(field_add:config.UniverseNode.lights)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>& UniverseNode::lights() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:config.UniverseNode.lights)
  return _internal_lights();
}
inline const ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>&
UniverseNode::_internal_lights() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lights_;
}
inline ::google::protobuf::RepeatedPtrField<::config::UniverseNode_Light>*
UniverseNode::_internal_mutable_lights() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lights_;
}

// uint32 max_channel = 2;
inline void UniverseNode::clear_max_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_channel_ = 0u;
}
inline ::uint32_t UniverseNode::max_channel() const {
  // @@protoc_insertion_point(field_get:config.UniverseNode.max_channel)
  return _internal_max_channel();
}
inline void UniverseNode::set_max_channel(::uint32_t value) {
  _internal_set_max_channel(value);
  // @@protoc_insertion_point(field_set:config.UniverseNode.max_channel)
}
inline ::uint32_t UniverseNode::_internal_max_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_channel_;
}
inline void UniverseNode::_internal_set_max_channel(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_channel_ = value;
}

// -------------------------------------------------------------------

// Node

// string name = 1;
inline void Node::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Node::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Node::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.Node.name)
}
inline std::string* Node::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:config.Node.name)
  return _s;
}
inline const std::string& Node::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Node::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Node::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Node::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:config.Node.name)
  return _impl_.name_.Release();
}
inline void Node::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:config.Node.name)
}

// .config.ConstantNode constant_node = 2;
inline bool Node::has_constant_node() const {
  return config_case() == kConstantNode;
}
inline bool Node::_internal_has_constant_node() const {
  return config_case() == kConstantNode;
}
inline void Node::set_has_constant_node() {
  _impl_._oneof_case_[0] = kConstantNode;
}
inline void Node::clear_constant_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kConstantNode) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.constant_node_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.constant_node_);
    }
    clear_has_config();
  }
}
inline ::config::ConstantNode* Node::release_constant_node() {
  // @@protoc_insertion_point(field_release:config.Node.constant_node)
  if (config_case() == kConstantNode) {
    clear_has_config();
    auto* temp = _impl_.config_.constant_node_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.constant_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::config::ConstantNode& Node::_internal_constant_node() const {
  return config_case() == kConstantNode ? *_impl_.config_.constant_node_ : reinterpret_cast<::config::ConstantNode&>(::config::_ConstantNode_default_instance_);
}
inline const ::config::ConstantNode& Node::constant_node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.constant_node)
  return _internal_constant_node();
}
inline ::config::ConstantNode* Node::unsafe_arena_release_constant_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:config.Node.constant_node)
  if (config_case() == kConstantNode) {
    clear_has_config();
    auto* temp = _impl_.config_.constant_node_;
    _impl_.config_.constant_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_constant_node(::config::ConstantNode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_constant_node();
    _impl_.config_.constant_node_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Node.constant_node)
}
inline ::config::ConstantNode* Node::_internal_mutable_constant_node() {
  if (config_case() != kConstantNode) {
    clear_config();
    set_has_constant_node();
    _impl_.config_.constant_node_ =
        ::google::protobuf::Message::DefaultConstruct<::config::ConstantNode>(GetArena());
  }
  return _impl_.config_.constant_node_;
}
inline ::config::ConstantNode* Node::mutable_constant_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::config::ConstantNode* _msg = _internal_mutable_constant_node();
  // @@protoc_insertion_point(field_mutable:config.Node.constant_node)
  return _msg;
}

// .config.AdderNode adder_node = 3;
inline bool Node::has_adder_node() const {
  return config_case() == kAdderNode;
}
inline bool Node::_internal_has_adder_node() const {
  return config_case() == kAdderNode;
}
inline void Node::set_has_adder_node() {
  _impl_._oneof_case_[0] = kAdderNode;
}
inline void Node::clear_adder_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kAdderNode) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.adder_node_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.adder_node_);
    }
    clear_has_config();
  }
}
inline ::config::AdderNode* Node::release_adder_node() {
  // @@protoc_insertion_point(field_release:config.Node.adder_node)
  if (config_case() == kAdderNode) {
    clear_has_config();
    auto* temp = _impl_.config_.adder_node_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.adder_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::config::AdderNode& Node::_internal_adder_node() const {
  return config_case() == kAdderNode ? *_impl_.config_.adder_node_ : reinterpret_cast<::config::AdderNode&>(::config::_AdderNode_default_instance_);
}
inline const ::config::AdderNode& Node::adder_node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.adder_node)
  return _internal_adder_node();
}
inline ::config::AdderNode* Node::unsafe_arena_release_adder_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:config.Node.adder_node)
  if (config_case() == kAdderNode) {
    clear_has_config();
    auto* temp = _impl_.config_.adder_node_;
    _impl_.config_.adder_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_adder_node(::config::AdderNode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_adder_node();
    _impl_.config_.adder_node_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Node.adder_node)
}
inline ::config::AdderNode* Node::_internal_mutable_adder_node() {
  if (config_case() != kAdderNode) {
    clear_config();
    set_has_adder_node();
    _impl_.config_.adder_node_ =
        ::google::protobuf::Message::DefaultConstruct<::config::AdderNode>(GetArena());
  }
  return _impl_.config_.adder_node_;
}
inline ::config::AdderNode* Node::mutable_adder_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::config::AdderNode* _msg = _internal_mutable_adder_node();
  // @@protoc_insertion_point(field_mutable:config.Node.adder_node)
  return _msg;
}

// .config.SubtractorNode subtractor_node = 4;
inline bool Node::has_subtractor_node() const {
  return config_case() == kSubtractorNode;
}
inline bool Node::_internal_has_subtractor_node() const {
  return config_case() == kSubtractorNode;
}
inline void Node::set_has_subtractor_node() {
  _impl_._oneof_case_[0] = kSubtractorNode;
}
inline void Node::clear_subtractor_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kSubtractorNode) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.subtractor_node_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.subtractor_node_);
    }
    clear_has_config();
  }
}
inline ::config::SubtractorNode* Node::release_subtractor_node() {
  // @@protoc_insertion_point(field_release:config.Node.subtractor_node)
  if (config_case() == kSubtractorNode) {
    clear_has_config();
    auto* temp = _impl_.config_.subtractor_node_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.subtractor_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::config::SubtractorNode& Node::_internal_subtractor_node() const {
  return config_case() == kSubtractorNode ? *_impl_.config_.subtractor_node_ : reinterpret_cast<::config::SubtractorNode&>(::config::_SubtractorNode_default_instance_);
}
inline const ::config::SubtractorNode& Node::subtractor_node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.subtractor_node)
  return _internal_subtractor_node();
}
inline ::config::SubtractorNode* Node::unsafe_arena_release_subtractor_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:config.Node.subtractor_node)
  if (config_case() == kSubtractorNode) {
    clear_has_config();
    auto* temp = _impl_.config_.subtractor_node_;
    _impl_.config_.subtractor_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_subtractor_node(::config::SubtractorNode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_subtractor_node();
    _impl_.config_.subtractor_node_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Node.subtractor_node)
}
inline ::config::SubtractorNode* Node::_internal_mutable_subtractor_node() {
  if (config_case() != kSubtractorNode) {
    clear_config();
    set_has_subtractor_node();
    _impl_.config_.subtractor_node_ =
        ::google::protobuf::Message::DefaultConstruct<::config::SubtractorNode>(GetArena());
  }
  return _impl_.config_.subtractor_node_;
}
inline ::config::SubtractorNode* Node::mutable_subtractor_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::config::SubtractorNode* _msg = _internal_mutable_subtractor_node();
  // @@protoc_insertion_point(field_mutable:config.Node.subtractor_node)
  return _msg;
}

// .config.MultiplierNode multiplier_node = 5;
inline bool Node::has_multiplier_node() const {
  return config_case() == kMultiplierNode;
}
inline bool Node::_internal_has_multiplier_node() const {
  return config_case() == kMultiplierNode;
}
inline void Node::set_has_multiplier_node() {
  _impl_._oneof_case_[0] = kMultiplierNode;
}
inline void Node::clear_multiplier_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kMultiplierNode) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.multiplier_node_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.multiplier_node_);
    }
    clear_has_config();
  }
}
inline ::config::MultiplierNode* Node::release_multiplier_node() {
  // @@protoc_insertion_point(field_release:config.Node.multiplier_node)
  if (config_case() == kMultiplierNode) {
    clear_has_config();
    auto* temp = _impl_.config_.multiplier_node_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.multiplier_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::config::MultiplierNode& Node::_internal_multiplier_node() const {
  return config_case() == kMultiplierNode ? *_impl_.config_.multiplier_node_ : reinterpret_cast<::config::MultiplierNode&>(::config::_MultiplierNode_default_instance_);
}
inline const ::config::MultiplierNode& Node::multiplier_node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.multiplier_node)
  return _internal_multiplier_node();
}
inline ::config::MultiplierNode* Node::unsafe_arena_release_multiplier_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:config.Node.multiplier_node)
  if (config_case() == kMultiplierNode) {
    clear_has_config();
    auto* temp = _impl_.config_.multiplier_node_;
    _impl_.config_.multiplier_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_multiplier_node(::config::MultiplierNode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_multiplier_node();
    _impl_.config_.multiplier_node_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Node.multiplier_node)
}
inline ::config::MultiplierNode* Node::_internal_mutable_multiplier_node() {
  if (config_case() != kMultiplierNode) {
    clear_config();
    set_has_multiplier_node();
    _impl_.config_.multiplier_node_ =
        ::google::protobuf::Message::DefaultConstruct<::config::MultiplierNode>(GetArena());
  }
  return _impl_.config_.multiplier_node_;
}
inline ::config::MultiplierNode* Node::mutable_multiplier_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::config::MultiplierNode* _msg = _internal_mutable_multiplier_node();
  // @@protoc_insertion_point(field_mutable:config.Node.multiplier_node)
  return _msg;
}

// .config.DividerNode divider_node = 6;
inline bool Node::has_divider_node() const {
  return config_case() == kDividerNode;
}
inline bool Node::_internal_has_divider_node() const {
  return config_case() == kDividerNode;
}
inline void Node::set_has_divider_node() {
  _impl_._oneof_case_[0] = kDividerNode;
}
inline void Node::clear_divider_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kDividerNode) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.divider_node_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.divider_node_);
    }
    clear_has_config();
  }
}
inline ::config::DividerNode* Node::release_divider_node() {
  // @@protoc_insertion_point(field_release:config.Node.divider_node)
  if (config_case() == kDividerNode) {
    clear_has_config();
    auto* temp = _impl_.config_.divider_node_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.divider_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::config::DividerNode& Node::_internal_divider_node() const {
  return config_case() == kDividerNode ? *_impl_.config_.divider_node_ : reinterpret_cast<::config::DividerNode&>(::config::_DividerNode_default_instance_);
}
inline const ::config::DividerNode& Node::divider_node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.divider_node)
  return _internal_divider_node();
}
inline ::config::DividerNode* Node::unsafe_arena_release_divider_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:config.Node.divider_node)
  if (config_case() == kDividerNode) {
    clear_has_config();
    auto* temp = _impl_.config_.divider_node_;
    _impl_.config_.divider_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_divider_node(::config::DividerNode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_divider_node();
    _impl_.config_.divider_node_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Node.divider_node)
}
inline ::config::DividerNode* Node::_internal_mutable_divider_node() {
  if (config_case() != kDividerNode) {
    clear_config();
    set_has_divider_node();
    _impl_.config_.divider_node_ =
        ::google::protobuf::Message::DefaultConstruct<::config::DividerNode>(GetArena());
  }
  return _impl_.config_.divider_node_;
}
inline ::config::DividerNode* Node::mutable_divider_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::config::DividerNode* _msg = _internal_mutable_divider_node();
  // @@protoc_insertion_point(field_mutable:config.Node.divider_node)
  return _msg;
}

// .config.UniverseNode universe_node = 7;
inline bool Node::has_universe_node() const {
  return config_case() == kUniverseNode;
}
inline bool Node::_internal_has_universe_node() const {
  return config_case() == kUniverseNode;
}
inline void Node::set_has_universe_node() {
  _impl_._oneof_case_[0] = kUniverseNode;
}
inline void Node::clear_universe_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (config_case() == kUniverseNode) {
    if (GetArena() == nullptr) {
      delete _impl_.config_.universe_node_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.config_.universe_node_);
    }
    clear_has_config();
  }
}
inline ::config::UniverseNode* Node::release_universe_node() {
  // @@protoc_insertion_point(field_release:config.Node.universe_node)
  if (config_case() == kUniverseNode) {
    clear_has_config();
    auto* temp = _impl_.config_.universe_node_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.config_.universe_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::config::UniverseNode& Node::_internal_universe_node() const {
  return config_case() == kUniverseNode ? *_impl_.config_.universe_node_ : reinterpret_cast<::config::UniverseNode&>(::config::_UniverseNode_default_instance_);
}
inline const ::config::UniverseNode& Node::universe_node() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Node.universe_node)
  return _internal_universe_node();
}
inline ::config::UniverseNode* Node::unsafe_arena_release_universe_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:config.Node.universe_node)
  if (config_case() == kUniverseNode) {
    clear_has_config();
    auto* temp = _impl_.config_.universe_node_;
    _impl_.config_.universe_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_universe_node(::config::UniverseNode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_config();
  if (value) {
    set_has_universe_node();
    _impl_.config_.universe_node_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Node.universe_node)
}
inline ::config::UniverseNode* Node::_internal_mutable_universe_node() {
  if (config_case() != kUniverseNode) {
    clear_config();
    set_has_universe_node();
    _impl_.config_.universe_node_ =
        ::google::protobuf::Message::DefaultConstruct<::config::UniverseNode>(GetArena());
  }
  return _impl_.config_.universe_node_;
}
inline ::config::UniverseNode* Node::mutable_universe_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::config::UniverseNode* _msg = _internal_mutable_universe_node();
  // @@protoc_insertion_point(field_mutable:config.Node.universe_node)
  return _msg;
}

inline bool Node::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void Node::clear_has_config() {
  _impl_._oneof_case_[0] = CONFIG_NOT_SET;
}
inline Node::ConfigCase Node::config_case() const {
  return Node::ConfigCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Connection

// uint32 from_node = 1;
inline void Connection::clear_from_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_node_ = 0u;
}
inline ::uint32_t Connection::from_node() const {
  // @@protoc_insertion_point(field_get:config.Connection.from_node)
  return _internal_from_node();
}
inline void Connection::set_from_node(::uint32_t value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:config.Connection.from_node)
}
inline ::uint32_t Connection::_internal_from_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_node_;
}
inline void Connection::_internal_set_from_node(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_node_ = value;
}

// uint32 from_output = 2;
inline void Connection::clear_from_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_output_ = 0u;
}
inline ::uint32_t Connection::from_output() const {
  // @@protoc_insertion_point(field_get:config.Connection.from_output)
  return _internal_from_output();
}
inline void Connection::set_from_output(::uint32_t value) {
  _internal_set_from_output(value);
  // @@protoc_insertion_point(field_set:config.Connection.from_output)
}
inline ::uint32_t Connection::_internal_from_output() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_output_;
}
inline void Connection::_internal_set_from_output(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_output_ = value;
}

// uint32 to_node = 3;
inline void Connection::clear_to_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_node_ = 0u;
}
inline ::uint32_t Connection::to_node() const {
  // @@protoc_insertion_point(field_get:config.Connection.to_node)
  return _internal_to_node();
}
inline void Connection::set_to_node(::uint32_t value) {
  _internal_set_to_node(value);
  // @@protoc_insertion_point(field_set:config.Connection.to_node)
}
inline ::uint32_t Connection::_internal_to_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_node_;
}
inline void Connection::_internal_set_to_node(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_node_ = value;
}

// uint32 to_input = 4;
inline void Connection::clear_to_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_input_ = 0u;
}
inline ::uint32_t Connection::to_input() const {
  // @@protoc_insertion_point(field_get:config.Connection.to_input)
  return _internal_to_input();
}
inline void Connection::set_to_input(::uint32_t value) {
  _internal_set_to_input(value);
  // @@protoc_insertion_point(field_set:config.Connection.to_input)
}
inline ::uint32_t Connection::_internal_to_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.to_input_;
}
inline void Connection::_internal_set_to_input(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.to_input_ = value;
}

// -------------------------------------------------------------------

// Runner

// repeated .config.Node nodes = 1;
inline int Runner::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int Runner::nodes_size() const {
  return _internal_nodes_size();
}
inline void Runner::clear_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodes_.Clear();
}
inline ::config::Node* Runner::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:config.Runner.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::config::Node>* Runner::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:config.Runner.nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nodes();
}
inline const ::config::Node& Runner::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Runner.nodes)
  return _internal_nodes().Get(index);
}
inline ::config::Node* Runner::add_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::config::Node* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:config.Runner.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::config::Node>& Runner::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:config.Runner.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::config::Node>&
Runner::_internal_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::config::Node>*
Runner::_internal_mutable_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nodes_;
}

// repeated .config.Connection connections = 2;
inline int Runner::_internal_connections_size() const {
  return _internal_connections().size();
}
inline int Runner::connections_size() const {
  return _internal_connections_size();
}
inline void Runner::clear_connections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connections_.Clear();
}
inline ::config::Connection* Runner::mutable_connections(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:config.Runner.connections)
  return _internal_mutable_connections()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::config::Connection>* Runner::mutable_connections()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:config.Runner.connections)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_connections();
}
inline const ::config::Connection& Runner::connections(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:config.Runner.connections)
  return _internal_connections().Get(index);
}
inline ::config::Connection* Runner::add_connections() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::config::Connection* _add = _internal_mutable_connections()->Add();
  // @@protoc_insertion_point(field_add:config.Runner.connections)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::config::Connection>& Runner::connections() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:config.Runner.connections)
  return _internal_connections();
}
inline const ::google::protobuf::RepeatedPtrField<::config::Connection>&
Runner::_internal_connections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connections_;
}
inline ::google::protobuf::RepeatedPtrField<::config::Connection>*
Runner::_internal_mutable_connections() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.connections_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace config


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // config_2eproto_2epb_2eh
